Q: What happens when you initialize a repository? Why do you need to do it?

A: Some meta-data are created so Git knows that this directory is under 
version control.

Q: How is the staging area different from the working directory and the 
repository? What value do you think it offers?

A: The staging area is a logical/virtual zone that serves as a bucket to
commit several files in one shot. If one programes in C, usally one has to modify a header hile .h and a source file .c when one creates a new function.
So both files must be commited together because they are logically related
to each other and they act as a block for the new function.
 
Q: How can you use the staging area to make sure you have one commit per logical change?

A: By modifying only the nescessary files with only the necessary changes that are requiered by a logical change. Then add the relevant files to tha stagging area and commit immedialty before dealing with the next logical change.

Q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A: For instance, I can try some creative ideas, say for a game, in separate branches so I do not disturbe or corrupt tha main branch (original game) and I can experiment in parallel various game ideas.

Q: How do the diagrams help you visualize the branch structure?

Q: What is the result of merging two branches together? Why do we represent 
it in the diagram the way we do?

Q: What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
